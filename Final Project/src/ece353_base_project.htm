<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [I:\ECE 353\Final Project\Final Project\project-src\ece353_base_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image I:\ECE 353\Final Project\Final Project\project-src\ece353_base_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri May 09 11:36:49 2014
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; masterApp &rArr; updateGameBoard &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[2e]">DisableInterrupts</a>
 <LI><a href="#[2d]">EnableInterrupts</a>
 <LI><a href="#[43]">StartCritical</a>
 <LI><a href="#[44]">EndCritical</a>
 <LI><a href="#[45]">WaitForInterrupt</a>
 <LI><a href="#[46]">getHeapBase</a>
 <LI><a href="#[47]">getHeapSize</a>
 <LI><a href="#[48]">getStackBase</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 110 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">SYSTICKIntHandler</a> from systick.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">TimerAIntHandler</a> from systick.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UART0IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">UART2IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UART5IntHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[40]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[42]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[2e]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAIntHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICKIntHandler
</UL>

<P><STRONG><a name="[2d]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerAIntHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICKIntHandler
</UL>

<P><STRONG><a name="[43]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>getHeapBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>getHeapSize</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>getStackBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>detectMaster</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = detectMaster &rArr; uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>randomItemGen</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randomItemGen
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[13]"></a>itemHit</STRONG> (Thumb, 994 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateGameBoard
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kittyMovement
</UL>

<P><STRONG><a name="[17]"></a>kittyMovement</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = kittyMovement &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemHit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[18]"></a>masterApp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = masterApp &rArr; updateGameBoard &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateGameBoard
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplay
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButton
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kittyMovement
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomItemGen
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>slaveApp</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = slaveApp &rArr; kittyMovement &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDisplay
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kittyMovement
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomItemGen
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = main &rArr; masterApp &rArr; updateGameBoard &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRandomValue
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCannonAngle
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cannonRateVelocity
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[25]"></a>initializeADC</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[22]"></a>GetADCval</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetADCval
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRandomValue
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateCannonAngle
</UL>

<P><STRONG><a name="[20]"></a>updateCannonAngle</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = updateCannonAngle &rArr; GetADCval
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCval
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>cannonRateVelocity</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>updateRandomValue</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = updateRandomValue &rArr; GetADCval
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCval
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>initializeGpioPins</STRONG> (Thumb, 690 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[10]"></a>uartTxPoll</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;examineButton
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[19]"></a>examineButton</STRONG> (Thumb, 808 bytes, Stack size 4 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = examineButton
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[1a]"></a>updateGameBoard</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = updateGameBoard &rArr; itemHit &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemHit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[1b]"></a>updateDisplay</STRONG> (Thumb, 850 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = updateDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
</UL>

<P><STRONG><a name="[1d]"></a>initBoard</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = initBoard &rArr; initUART5 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeWatchDog
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeTimerA
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSysTick
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSPI
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART5
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART2
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeGpioPins
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeADC
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>SYSTICKIntHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SYSTICKIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>TimerAIntHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TimerAIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>initializeWatchDog</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[26]"></a>initializeSysTick</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[27]"></a>initializeTimerA</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[29]"></a>initUART</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initUART &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2a]"></a>initUART2</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initUART2 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2b]"></a>initUART5</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initUART5 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[f]"></a>uartRx</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uartRx &rArr; cBufGetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[e]"></a>uartTx</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uartTx &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveApp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterApp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectMaster
</UL>

<P><STRONG><a name="[5]"></a>UART0IntHandler</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART0IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UART2IntHandler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART2IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART5IntHandler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UART5IntHandler &rArr; cBufAddChar
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>initializeSPI</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initializeSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[33]"></a>spi_eeprom_read_status</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>

<P><STRONG><a name="[35]"></a>spi_eeprom_wait_write_in_progress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
</UL>

<P><STRONG><a name="[36]"></a>spi_eeprom_read_byte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>

<P><STRONG><a name="[37]"></a>spi_eeprom_write_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[38]"></a>spi_eeprom_write_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[39]"></a>spi_eeprom_write_byte</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>

<P><STRONG><a name="[34]"></a>spiTx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
</UL>

<P><STRONG><a name="[23]"></a>PLL_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2f]"></a>cBufInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART5
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART2
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[32]"></a>cBufAddChar</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cBufAddChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[31]"></a>cBufGetChar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cBufGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[30]"></a>cBufGetFreeCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, circular_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRx
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[12]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomItemGen
</UL>

<P><STRONG><a name="[1f]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemHit
</UL>

<P><STRONG><a name="[14]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemHit
</UL>

<P><STRONG><a name="[16]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemHit
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[49]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[50]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
